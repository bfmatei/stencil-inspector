/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  ItemData,
  ParsedCategoryData,
} from '~helpers/declarations';

import {
  Arrow as SiArrow
} from './components/arrow/arrow';

declare global {
  interface HTMLSiArrowElement extends SiArrow, HTMLStencilElement {
  }
  var HTMLSiArrowElement: {
    prototype: HTMLSiArrowElement;
    new (): HTMLSiArrowElement;
  };
  interface HTMLElementTagNameMap {
    "si-arrow": HTMLSiArrowElement;
  }
  interface ElementTagNameMap {
    "si-arrow": HTMLSiArrowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-arrow": JSXElements.SiArrowAttributes;
    }
  }
  namespace JSXElements {
    export interface SiArrowAttributes extends HTMLAttributes {
      direction?: boolean;
    }
  }
}


import {
  Category as SiCategory
} from './components/category/category';

declare global {
  interface HTMLSiCategoryElement extends SiCategory, HTMLStencilElement {
  }
  var HTMLSiCategoryElement: {
    prototype: HTMLSiCategoryElement;
    new (): HTMLSiCategoryElement;
  };
  interface HTMLElementTagNameMap {
    "si-category": HTMLSiCategoryElement;
  }
  interface ElementTagNameMap {
    "si-category": HTMLSiCategoryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-category": JSXElements.SiCategoryAttributes;
    }
  }
  namespace JSXElements {
    export interface SiCategoryAttributes extends HTMLAttributes {
      category?: ParsedCategoryData;
      dark?: boolean;
    }
  }
}


import {
  ItemValue as SiItemValue
} from './components/item-value/item-value';

declare global {
  interface HTMLSiItemValueElement extends SiItemValue, HTMLStencilElement {
  }
  var HTMLSiItemValueElement: {
    prototype: HTMLSiItemValueElement;
    new (): HTMLSiItemValueElement;
  };
  interface HTMLElementTagNameMap {
    "si-item-value": HTMLSiItemValueElement;
  }
  interface ElementTagNameMap {
    "si-item-value": HTMLSiItemValueElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-item-value": JSXElements.SiItemValueAttributes;
    }
  }
  namespace JSXElements {
    export interface SiItemValueAttributes extends HTMLAttributes {
      canExpand?: boolean;
      dark?: boolean;
      expanded?: boolean;
      item?: ItemData;
      onExpand?: (event: MouseEvent) => void;
    }
  }
}


import {
  Item as SiItem
} from './components/item/item';

declare global {
  interface HTMLSiItemElement extends SiItem, HTMLStencilElement {
  }
  var HTMLSiItemElement: {
    prototype: HTMLSiItemElement;
    new (): HTMLSiItemElement;
  };
  interface HTMLElementTagNameMap {
    "si-item": HTMLSiItemElement;
  }
  interface ElementTagNameMap {
    "si-item": HTMLSiItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-item": JSXElements.SiItemAttributes;
    }
  }
  namespace JSXElements {
    export interface SiItemAttributes extends HTMLAttributes {
      dark?: boolean;
      item?: ItemData;
      print?: boolean;
    }
  }
}


import {
  Logo as SiLogo
} from './components/logo/logo';

declare global {
  interface HTMLSiLogoElement extends SiLogo, HTMLStencilElement {
  }
  var HTMLSiLogoElement: {
    prototype: HTMLSiLogoElement;
    new (): HTMLSiLogoElement;
  };
  interface HTMLElementTagNameMap {
    "si-logo": HTMLSiLogoElement;
  }
  interface ElementTagNameMap {
    "si-logo": HTMLSiLogoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-logo": JSXElements.SiLogoAttributes;
    }
  }
  namespace JSXElements {
    export interface SiLogoAttributes extends HTMLAttributes {
      dark?: boolean;
    }
  }
}


import {
  Main as SiMain
} from './components/main/main';

declare global {
  interface HTMLSiMainElement extends SiMain, HTMLStencilElement {
  }
  var HTMLSiMainElement: {
    prototype: HTMLSiMainElement;
    new (): HTMLSiMainElement;
  };
  interface HTMLElementTagNameMap {
    "si-main": HTMLSiMainElement;
  }
  interface ElementTagNameMap {
    "si-main": HTMLSiMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-main": JSXElements.SiMainAttributes;
    }
  }
  namespace JSXElements {
    export interface SiMainAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Message as SiMessage
} from './components/message/message';

declare global {
  interface HTMLSiMessageElement extends SiMessage, HTMLStencilElement {
  }
  var HTMLSiMessageElement: {
    prototype: HTMLSiMessageElement;
    new (): HTMLSiMessageElement;
  };
  interface HTMLElementTagNameMap {
    "si-message": HTMLSiMessageElement;
  }
  interface ElementTagNameMap {
    "si-message": HTMLSiMessageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-message": JSXElements.SiMessageAttributes;
    }
  }
  namespace JSXElements {
    export interface SiMessageAttributes extends HTMLAttributes {
      dark?: boolean;
      message?: string;
    }
  }
}


import {
  Refresh as SiRefresh
} from './components/refresh/refresh';

declare global {
  interface HTMLSiRefreshElement extends SiRefresh, HTMLStencilElement {
  }
  var HTMLSiRefreshElement: {
    prototype: HTMLSiRefreshElement;
    new (): HTMLSiRefreshElement;
  };
  interface HTMLElementTagNameMap {
    "si-refresh": HTMLSiRefreshElement;
  }
  interface ElementTagNameMap {
    "si-refresh": HTMLSiRefreshElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "si-refresh": JSXElements.SiRefreshAttributes;
    }
  }
  namespace JSXElements {
    export interface SiRefreshAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
