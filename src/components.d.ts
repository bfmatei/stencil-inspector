/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  ItemData,
  ParsedCategoryData,
} from '~helpers/declarations';

import {
  Arrow as StiArrow
} from './components/arrow/arrow';

declare global {
  interface HTMLStiArrowElement extends StiArrow, HTMLStencilElement {
  }
  var HTMLStiArrowElement: {
    prototype: HTMLStiArrowElement;
    new (): HTMLStiArrowElement;
  };
  interface HTMLElementTagNameMap {
    "sti-arrow": HTMLStiArrowElement;
  }
  interface ElementTagNameMap {
    "sti-arrow": HTMLStiArrowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-arrow": JSXElements.StiArrowAttributes;
    }
  }
  namespace JSXElements {
    export interface StiArrowAttributes extends HTMLAttributes {
      direction?: boolean;
    }
  }
}


import {
  Category as StiCategory
} from './components/category/category';

declare global {
  interface HTMLStiCategoryElement extends StiCategory, HTMLStencilElement {
  }
  var HTMLStiCategoryElement: {
    prototype: HTMLStiCategoryElement;
    new (): HTMLStiCategoryElement;
  };
  interface HTMLElementTagNameMap {
    "sti-category": HTMLStiCategoryElement;
  }
  interface ElementTagNameMap {
    "sti-category": HTMLStiCategoryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-category": JSXElements.StiCategoryAttributes;
    }
  }
  namespace JSXElements {
    export interface StiCategoryAttributes extends HTMLAttributes {
      category?: ParsedCategoryData;
      dark?: boolean;
    }
  }
}


import {
  ItemValue as StiItemValue
} from './components/item-value/item-value';

declare global {
  interface HTMLStiItemValueElement extends StiItemValue, HTMLStencilElement {
  }
  var HTMLStiItemValueElement: {
    prototype: HTMLStiItemValueElement;
    new (): HTMLStiItemValueElement;
  };
  interface HTMLElementTagNameMap {
    "sti-item-value": HTMLStiItemValueElement;
  }
  interface ElementTagNameMap {
    "sti-item-value": HTMLStiItemValueElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-item-value": JSXElements.StiItemValueAttributes;
    }
  }
  namespace JSXElements {
    export interface StiItemValueAttributes extends HTMLAttributes {
      canExpand?: boolean;
      dark?: boolean;
      expanded?: boolean;
      item?: ItemData;
      onExpand?: (event: MouseEvent) => void;
    }
  }
}


import {
  Item as StiItem
} from './components/item/item';

declare global {
  interface HTMLStiItemElement extends StiItem, HTMLStencilElement {
  }
  var HTMLStiItemElement: {
    prototype: HTMLStiItemElement;
    new (): HTMLStiItemElement;
  };
  interface HTMLElementTagNameMap {
    "sti-item": HTMLStiItemElement;
  }
  interface ElementTagNameMap {
    "sti-item": HTMLStiItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-item": JSXElements.StiItemAttributes;
    }
  }
  namespace JSXElements {
    export interface StiItemAttributes extends HTMLAttributes {
      dark?: boolean;
      item?: ItemData;
      print?: boolean;
    }
  }
}


import {
  Logo as StiLogo
} from './components/logo/logo';

declare global {
  interface HTMLStiLogoElement extends StiLogo, HTMLStencilElement {
  }
  var HTMLStiLogoElement: {
    prototype: HTMLStiLogoElement;
    new (): HTMLStiLogoElement;
  };
  interface HTMLElementTagNameMap {
    "sti-logo": HTMLStiLogoElement;
  }
  interface ElementTagNameMap {
    "sti-logo": HTMLStiLogoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-logo": JSXElements.StiLogoAttributes;
    }
  }
  namespace JSXElements {
    export interface StiLogoAttributes extends HTMLAttributes {
      dark?: boolean;
    }
  }
}


import {
  Main as StiMain
} from './components/main/main';

declare global {
  interface HTMLStiMainElement extends StiMain, HTMLStencilElement {
  }
  var HTMLStiMainElement: {
    prototype: HTMLStiMainElement;
    new (): HTMLStiMainElement;
  };
  interface HTMLElementTagNameMap {
    "sti-main": HTMLStiMainElement;
  }
  interface ElementTagNameMap {
    "sti-main": HTMLStiMainElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-main": JSXElements.StiMainAttributes;
    }
  }
  namespace JSXElements {
    export interface StiMainAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Message as StiMessage
} from './components/message/message';

declare global {
  interface HTMLStiMessageElement extends StiMessage, HTMLStencilElement {
  }
  var HTMLStiMessageElement: {
    prototype: HTMLStiMessageElement;
    new (): HTMLStiMessageElement;
  };
  interface HTMLElementTagNameMap {
    "sti-message": HTMLStiMessageElement;
  }
  interface ElementTagNameMap {
    "sti-message": HTMLStiMessageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-message": JSXElements.StiMessageAttributes;
    }
  }
  namespace JSXElements {
    export interface StiMessageAttributes extends HTMLAttributes {
      dark?: boolean;
      message?: string;
    }
  }
}


import {
  Refresh as StiRefresh
} from './components/refresh/refresh';

declare global {
  interface HTMLStiRefreshElement extends StiRefresh, HTMLStencilElement {
  }
  var HTMLStiRefreshElement: {
    prototype: HTMLStiRefreshElement;
    new (): HTMLStiRefreshElement;
  };
  interface HTMLElementTagNameMap {
    "sti-refresh": HTMLStiRefreshElement;
  }
  interface ElementTagNameMap {
    "sti-refresh": HTMLStiRefreshElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sti-refresh": JSXElements.StiRefreshAttributes;
    }
  }
  namespace JSXElements {
    export interface StiRefreshAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
